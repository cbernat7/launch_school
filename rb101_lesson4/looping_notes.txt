arr = [1,2,3,4,5]
counter = 0
loop do
  arr[counter] += 1
  counter += 1
  break if counter == arr.size
end 

arr #=> [2,3,4,5,6]

Kernel#loop is in the kernel module, so it's available everywhere

counter initialized outside of the loop.
if initalized inside, it would be reset to 0 each loop 

next - loops skip the rest of the current iteration and begin the next one
ex:

counter = 0 
loop do
  counter += 1
  next if counter.odd?
  puts counter
  break if counter > 5
end

had to move counter += above next, so it had to be executed before the loop gets skipped

------------------------------
Iterating over collections:
string:
alphabet = 'abcdefghijklmnopqrstuvwxyz'
counter = 0

loop do
  break if counter == alphabet.size
  puts alphabet[counter]
  counter += 1
end

iterates over the entire string, useing string reference to retrieve each letter based on its index.
string#size returns the number of characters in the string
string#length does the same thing.
-----------------------------------------------------------

colors = ['green', 'blue', 'purple', 'orange']
counter = 0

loop do
  break if counter == colors.size
  puts "I'm the color #{colors[counter]}!"
  counter += 1
end


objects = ['hello', :key, 10, []]
counter = 0

loop do
  break if counter == objects.size
  puts objects[counter].class
  counter += 1
end

will print out:
string
symbol
integer
array

-----------------------------------------------------------
num_of_pets = {
  'dogs' => 2,
  'cats' => 4,
  'fish' = > 1
}
pets = num_of_pets.keys #=> ['dogs', 'cats', 'fish']
counter = 0

loop do
  break if counter == num_of_pets.size
  current_pet = pets[counter]
  current_pet_number = num_of_pets[current_pet]
  puts "#{current_pet_number} #{current_pet}"
  counter += 1
end

this requires a couple more steps bc of the key/value pairs instead of index.
first have to create an array containing all the keys in the hash using Hash#keys
returns an array of all the keys in the hash.
1. iterating over the array of keys, pets, and saving each key into current_pet variable
then use the current_pet to retrieve value out  of the num_of_pets hash

