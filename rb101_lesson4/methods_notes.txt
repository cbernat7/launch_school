EACH, SELECT, MAP 

each - iterate over a collection
[1, 2, 3].each do |num| 
  puts num
end



#working with an array. .each is method called on the array.
the method takes a block, do..end
the code within the blok is executed for each iteration. 
a little different for hashes:

hash = [a: 1, b: 2, c:3 ]
hash.each do |key, value|
  puts "the key is #{key} and the value is #{value}"
end

main difference between loop and each is the return value
each - returns the original collection.
if we place each inside a method. the return value of the method is the return value of the last expression within the method

def a_method
  [1,2,3].each do |num|
    puts num * 2
  end
end
 
 a_method => [1,2,3]

 if we change the method so a statement gets evaluated after #each:
 def a_method
  [1,2,3].each do |num|
    puts num * 2
  end

  puts 'hi'
end

a_method #=> nil

returns nil bc the return value of puts 'hi' is nil

-----
SELECT
instead of loop with counter and a break condition

[1,2,3].select do |num|
  num.odd?
end

select evalutes the return value of the block.select only cares about truthiness 
if the return value of the block is truthy, the element during that iteration will be selected.
if falsey,  the element will not be selected.

if an element is selected, its placed in a new collection.
returns a new collection of all the selected elements.
[1,2,3].select do |num|
  num + 1
end
#=> [1,2,3]

if we do this:
[1,2,3].select do |num|
  num + 1
  puts num
end

1
2
3
#=> []

select returns an empty array bc puts num returns a falsey value. so select won't select any elements.

--------------
MAP
map uses the return value of the block to perform transformation
[1,2,3].map do |num|
  num * 2
end
=>[2,4,6]

map takes the return value of the block and places it in a new collection.
map always performs transformation based on the return value of the block:

[1,2,3].map do |num|
  num.odd?
end
#=> [true, false, true]

^the collection returned by map will be an array of booleans

[1,2,3].map do |num|
  num.odd?
  puts num
end
#=> [nil, nil, nil]

^the return value of each iteration of the block is nil. map returns an array of nils.
if the only statement within the block is a string:

[1,2,3].map do |num|
  'hi'
end

#=> ['hi', 'hi', 'hi']

^the return value of the block is 'hi' so map performs transformation and returns an array of 'hi's

each:
  -iteration
  -doesnt consider return value of block
  -returns orig collection
  -length of orig
select:
  -selection
  -considers truthiness of return value of block
  -returns new collection
  -length of orig or less
map:
  -transformation
  -considers return value of block
  -returns new collection
  -length of original


  ----
  Array#any
  -looks at truthiness of the blocks return value
  -if block returns truthy value for any element in the collection, the method will return true
  -can also be used w  a hsh

  [1,2,3].any? do |num|
    num > 2
  end
  #=> true

  { a: 'ant', b: 'bear', c: 'cat}.any? do |key, value|
    value.size > 4
  end
  #=> false

  --------------------------
  Enumerable#all
  -look at the truthiness of blocks return value
  -returns true if the blocks return value in every ieration is truthy 
  [1,2,3].all? do |num|
    num > 2
  end
  #=> false

  { a: 'ant', b: 'bear', c: 'cat}.all? do |key, value|
    value.length >= 3
  end
  #=> true

  ------------------------
  Enumerable#each_with_index

  -take a block, execute the code, ignore the blocks return value
  -takes  a second argument which represents the index of each element
  -with calling on a hash, the first argument represents an array containing both the key and the value
  - like each, always returns the original calling collection

[1 ,2, 3].each_with_index do |num, index|
  puts "the index of #{num}  is #{index}"
end
# The index of 1 is 0.
# The index of 2 is 1.
# The index of 3 is 2.
# => [1, 2, 3]

{ a: "ant", b: "bear", c: "cat" }.each_with_index do |pair, index|
  puts the "index of #{pair} is #{index}"
end
# The index of [:a, "ant"] is 0.
# The index of [:b, "bear"] is 1.
# The index of [:c, "cat"] is 2.
# => { :a => "ant", :b => "bear", :c => "cat" }

------------------------------
Enumerable#each_with_object

-takes a method argument, a collection object that will be returned by the method.
-the block takes 2 arguments of its own
  -first: represents the current element
  -second: represents the collection object that was passed in as an argument to the method
-method returns the collection object that was passed in:

[1, 2, 3].each_with_object([]) do |num, array|
  array << num if num.odd?
end
#=> [1, 3]

^array is initialized to an empty array, []. inside the block can manipulate array.
the first block argument turns into an array when using each_with_object on a hash:

{ a: "ant", b: "bear", c: "cat" }.each_with_object([]) do |pair, array|
  array << pair.last
end
#=> ['ant', 'bear', 'cat']

can also use parens to capture the key and value in the first block argument:

{ a: "ant", b: "bear", c: "cat" }.each_with_object({}) do |(key, value), hash|
  hash[value] = key
end
#=> {"ant" => :a, "bear" => :b, "cat" => :c }
--------------------------------------------------
Enumerable#first

-takes an optional argument which represents the number of elements to return. 
-when no argument is given, returns only the first element in the collection.
[1, 2, 3].first
#=> 1

on a hash:
{ a: "ant", b: "bear", c: "cat" }.first(2)
#=> [[:a, 'ant], [:b, 'bear']]

^return value is a nested array.
can return back to hash by calling .to_h


---------------------------------
Enumerable#include?
-requires one argument
-returns true if argument exists in collection
-returns false if doesn't
-only checks the keys in a hash NOT values
  -for hash, is preferred to use .key? instead of .include?
  -to check value can use .value?


[1,2,3].include?(1)
#=> true

{ a: "ant", b: "bear", c: "cat" }.include?('ant')
#=>false
{ a: "ant", b: "bear", c: "cat" }.include?(:a)
#=> true

----------------------------------------------------
Enumerable#partition
-divides up elements in the current collection into 2 collections 
-depending on the blocks return value
-return value is a nested array, inner arrays sepearted based on the blocks return value
-hash: the return value will always be an array

[1, 2, 3].partition do |num|
  num.odd?
end
#=> [[1. 3], [2]]

odd, even = [1,2,3].partition do |num|
  num.odd?
end
odd #=> [1,3]
even #=> [2]

long, short = { a: "ant", b: "bear", c: "cat" }.partition do |key, value|
  value.size > 3
end
#=> [[[:b, "bear"]], [[:a, "ant], [:c, "cat]]]
long.to_h #=> { :b => "bear"}
short.to_h #=> { :a => "ant", :c => "cat"}

