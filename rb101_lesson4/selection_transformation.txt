selection:
-picking certain elements out of a collection depending on certain criteria
-ex: pick out all odd integersfrom an array

Transformation:
-manipulating eery element in the collection
-ex: increment all elements of the array by 1

for n elements in a collection:
-selection result sin n or less elements
-transformation always results in exactly n elements

Both require:
-a loop
-a counter
-way to retrieve the current value
-way to exit the loop
-some criteria

Examples:
SELECTION
alphabet = 'abcdefghijklmnopqrstuvwxyz'
selected_chars = ''
counter = 0

loop do
  current_char = alphabet[counter]
  if current_char == 'g'          #this is the selection criteria
    selected_char << current_char
  end

  counter += 1
  break if counter == alphabet.size
end

selected_chars

-----
TRANSFORMATION
fruits = %w(apple banana pear)
transformed_elements = []
counter = 0

loop do
  current_element = fruits[counter]
  transformed_elements << current_element + 's'

  counter += 1
  break if counter == fruits.size
end

transformed_elements #=> ['apples', 'bananas', 'pears']

^we don't need an if statement bc applying to every single element
we created NEW array and leave original array unchanged

------------------
EXTRACTING TO methods
if we wanted to select all the vowels in a given string, create a method first

def selected_vowels(str)
  selected_chars = ''
  counter = 0

  loop do
    current_char = str[counter]
    if 'aeiouAEIOU'.include?(current_char)
      selected_char << current_char
    end

    counter += 1
    break if counter == str.size

  end
  selected_chars
end      

^when the method is done iterating over the collection it RETURNS a new collection containing the selected values
selected_vowels('the quick brown fox') #=> "euioo"
sentence = "i wandered lonely as a cloud'
selected_vowels(sentence) #=> 'Iaeeoeaaou'
number_of_vowels = selected_vowels('hello world').size
number_of_vowels #=> 3

^^we can call other methods on the return value of our method.

_________________________________________

Transformation examples: entire transformation code is within a method definition

def double_nums(nums)
  doubled_nums = []
  counter = 0

  loop do
    break if counter == nums.size

    current_num = nums[counter]
    doubled_nums << current_num * 2

    counter += 1
  end

  doubled_nums
end


##can invoke the method like this:

my_nums = [1,1, 3, 4, 5, 6]
double_nums(my_nums)
---------------------------
transformation only on a subset of the elements in the collection.
ex: only multiply by 2 if the value is odd

def double_odd_numbers(numbers)
  doubled_numbers = []
  counter = 0

  loop do
    break if counter  == numbers.size

    current_number = numbers[counter]
    current_number *= 2 if current_number.odd?
    doubled_numbers << current_number

    counter += 1
  end

  doubled_numbers
end

^working with a method that doesn't mutate its argument and instead returns a new array.
what if we wanted to transform the nubmers based on their position in the array rathe rthan their value?
solution that doubles the numbers that have odd indices:

would switch line 124 above to be:
current_number *= 2 if counter.odd?



-----------------------------------------------
create a general_select method so we can specify what we're selecting for

def general_select(produce_list, selection_criteria)
  produce_keys = produce_list.keys
  counter = 0
  selected_produce = {}

  loop do
    break if counter == produce_keys.size

    current_key = produce_keys[counter]
    current_value = produce_list[current_key]

    if current_value == selection_criteria
      selected_produce[current_key] = current_value
    end

    counter += 1
  end

  selected_produce
end

general_select(produce, "Fruit")

------------------------------------------
update prev double_nums to multiply by any number.

#multiply array by specified number
def multiply(numbers, multiplier)
  multiplied_nums = []
  counter = 0

  loop do
    break if counter == numbers.size
    
    multiplied_nums << numbers[counter] * multiplier
    counter += 1
  end

  multiplied_nums
end


-------------------------------
#take a string and return a new string containing only the letter that we specified

def select_letter(sentence, character)
  selected_chars = ''
  counter = =

  loop do
    break if counter == sentence.size
    current_char = sentence[counter]

    if current_char == character
      selected_chars << current_char
    end

    counter +=1
  end

  selected_chars #returns a string
end

^bc returns a string, we can string methods onto the return value.
select_letter(question, 'a').size


-------------------
for loop:
for char in alphabet.chars
  puts char
end